[DEFAULT]
device = 'cuda:n' or 'cpu', n=GPU ID
app_name = <chosen_name>, a folder named <app_name> is created in the main directory.

[original model]
arch = <model_name>, e.g. 'lenet5' if you want to run lenet5 network.
model_path = <directory where pretrained model is stored>
file_name = <pretrained_file_name.pth>
num_classes = '10', #classes in dataset
batch_size = 
class = -1

[dataset]
dataset = <dataset_name> 'mnist' or 'cifar10' or 'cifar100' or 'svhn' or 'imagenet' are supported.
data_dir = <directory where dataset is stored>

[functions]
validate = True/False, run inference on the model
remove_bn = True/False, remove batch-normalization (BN) layers (if any) from the model and test it.
use_nobn = True/False, use BN-free model
validate_nobn = True/False, run inference on BN-free model (must be pre-created)

[spiking]
compute_thresholds = True/False, compute thresholds of the Integrate-and-Fire (IF) neurons
percentile = 99.9, for data-based threshold-balancing scheme (refer to [1])
convert_to_spike = True/False, convert pre-trained ANN to SNN
simulate_spiking = True/False, simulate the converted SNN using spiking input
MFR = <(0,1]>, max. firing rate of input neurons 
clamp_slope = 0
unity_vth = True/False, both arguments produce equivalent results. if true, weights are scaled [1] 
num_batches = 10, #input batches to simulate SNN on.
time_window = 400, #simulation time steps
poisson_spikes = True/False, if true, provide poisson rate-encoded inputs, else analog inputs
reset = 'to-threshold' or 'to-zero', neuron reset mechanism at a spike event
hybrid_model = True/False, create a hybrid SNN-ANN model
split_layer = 16, a (valid) layer number at which to split the model. layers of type conv, avgpool and linear are considered valid.

;saving..
save_activations = True/False, record output spikes of all layers across simulated duration
save_correlation = True/False, record correlation between SNN and ANN outputs for all layers 
write_to_file = True/False, writes the activation and correlation values to disk

;plotting
plot_mean_var = True/False, plot mean/variance of weights and biases in the network
plot_correlations = True/False, Plots the saved correlation values and saves to a .png file
plot_activity = True/False, Plots layer-wise average activity of SNN
plot_histogram = True/False, saves neuron-based spike count stats to a .csv file


[plotting]
layer_nums = [0,5,10,15,19], (valid) layer numbers for which correlations are plotted
num_imgs = 50, #inputs for which correlations are plotted
